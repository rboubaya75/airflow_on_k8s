apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pvc
  namespace: my-minio
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: nfs-storage
  volumeName: minio-pv

apiVersion: v1
kind: PersistentVolume
metadata:
  name: minio-pv
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  nfs:
    server: 10.0.3.5
    path: /mnt/nfs_share/minio
  storageClassName: nfs-storage
  persistentVolumeReclaimPolicy: Recycle
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: minio
  namespace: my-minio
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: my-minio
  name: minio-role
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log", "services", "endpoints", "persistentvolumeclaims"]
  verbs: ["get", "list", "watch", "create", "delete", "patch", "update"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch", "create", "delete", "patch", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: minio-rolebinding
  namespace: my-minio
subjects:
- kind: ServiceAccount
  name: minio
  namespace: my-minio
roleRef:
  kind: Role
  name: minio-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: my-minio
  labels:
    app.kubernetes.io/instance: minio
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2024.5.10
    helm.sh/chart: minio-14.4.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: minio
      app.kubernetes.io/name: minio
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: minio
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: minio
        app.kubernetes.io/version: 2024.5.10
        helm.sh/chart: minio-14.4.0
      annotations:
        checksum/credentials-secret: b554554e60cfd03f77db53ed429797154773d8cead11670149b3b61aef810039
        kubectl.kubernetes.io/restartedAt: "2024-05-15T03:42:19Z"
    spec:
      serviceAccountName: minio
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: minio
                    app.kubernetes.io/name: minio
                topologyKey: kubernetes.io/hostname
      automountServiceAccountToken: false
      containers:
        - name: minio
          image: docker.io/bitnami/minio:2024.5.10-debian-12-r0
          imagePullPolicy: IfNotPresent
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MINIO_SCHEME
              value: http
            - name: MINIO_FORCE_NEW_KEYS
              value: "no"
            - name: MINIO_API_PORT_NUMBER
              value: "9000"
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: minio-secrets
                  key: MINIO_ROOT_USER
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: minio-secrets
                  key: MINIO_ROOT_PASSWORD
            - name: MINIO_BROWSER
              value: "on"
            - name: MINIO_PROMETHEUS_AUTH_TYPE
              value: public
            - name: MINIO_CONSOLE_PORT_NUMBER
              value: "9001"
            - name: MINIO_DATA_DIR
              value: /bitnami/minio/data
          ports:
            - containerPort: 9000
              name: minio-api
              protocol: TCP
            - containerPort: 9001
              name: minio-console
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: minio-api
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            tcpSocket:
              port: minio-api
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits:
              cpu: 375m
              ephemeral-storage: 1Gi
              memory: 384Mi
            requests:
              cpu: 250m
              ephemeral-storage: 50Mi
              memory: 256Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: [ "ALL" ]
            privileged: false
            readOnlyRootFilesystem: true
            runAsUser: 1001
            runAsGroup: 1001
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/minio/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /.mc
              subPath: app-mc-dir
            - name: data
              mountPath: /bitnami/minio/data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: data
          persistentVolumeClaim:
            claimName: minio-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: my-minio
  labels:
    app.kubernetes.io/instance: minio
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2024.5.10
    helm.sh/chart: minio-14.4.0
spec:
  type: NodePort
  selector:
    app.kubernetes.io/instance: minio
    app.kubernetes.io/name: minio
  ports:
    - name: minio-api
      port: 9000
      targetPort: minio-api
      protocol: TCP
      nodePort: 30100
    - name: minio-console
      port: 9001
      targetPort: minio-console
      protocol: TCP
      nodePort: 30101
---
apiVersion: v1
kind: Secret
metadata:
  name: minio-secrets
  namespace: my-minio
type: Opaque
data:
  MINIO_ROOT_USER: aFQ0VU9zamx5T1l2ODlXQw==
  MINIO_ROOT_PASSWORD: bVRWcUlXdVVnbFY2NUxNSXVNaFVibDUwdEs5YU9SRkk=