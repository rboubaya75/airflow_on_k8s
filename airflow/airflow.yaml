apiVersion: v1
kind: Namespace
metadata:
  name: airflow

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: airflow
  namespace: airflow

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: airflow-role
rules:
  - apiGroups: [""]
    resources: ["pods", "pods/log", "services", "endpoints", "persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: ["batch"]
    resources: ["jobs", "cronjobs"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["get", "create", "update", "delete"]
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["get", "list", "watch", "create", "delete", "update"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "list", "watch", "create", "update", "delete"]
  - apiGroups: ["sparkoperator.k8s.io"]
    resources: ["sparkapplications"]
    verbs: ["create", "get", "list", "watch", "delete", "update"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: airflow-binding
subjects:
  - kind: ServiceAccount
    name: airflow
    namespace: airflow
roleRef:
  kind: ClusterRole
  name: airflow-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: airflow-config
  namespace: airflow
data:
  airflow.cfg: |
    [core]
    executor = KubernetesExecutor
    dags_folder = /opt/airflow/dags
    base_log_folder = /opt/airflow/logs
    load_examples = False
    fernet_key = oV7C9P6Ao4GvFy1XfD1HZyJ2YX-5qY3uJ3G5m4c8mPc=

    [database]
    sql_alchemy_conn = postgresql+psycopg2://airflow:airflow@postgres:5432/airflow

    [kubernetes_executor]
    pod_template_file = /opt/airflow/pod_template.yaml
    worker_container_repository = rboubaya/airflow
    worker_container_tag = 1.0
    in_cluster = True
    namespace = airflow
    delete_worker_pods = True
    worker_pods_creation_batch_size = 5
    
    [logging]
    remote_logging = False
    logging_level = INFO

    [metrics]
    metrics_use_pattern_match = True
    statsd_on = True
    statsd_host = statsd
    statsd_port = 8125
    statsd_prefix = airflow

  pod_template.yaml: |
    apiVersion: v1
    kind: Pod
    metadata:
      name: airflow-worker
      namespace: airflow
    spec:
      containers:
      - name: base
        image: rboubaya/airflow:1.0
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: airflow-dags
          mountPath: /opt/airflow/dags
      volumes:
      - name: airflow-dags
        persistentVolumeClaim:
          claimName: airflow-dags-pvc

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: airflow-dags-pv
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  nfs:
    server: 10.0.3.5
    path: /mnt/nfs_share/airflow-dags
  storageClassName: nfs-storage 
  Reclaim Policy:  Delete

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: airflow-dags-pvc
  namespace: airflow
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: nfs-storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: airflow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      nodeSelector:
        kubernetes.io/hostname: workers-vm-1
      tolerations:
      - key: "worker"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      containers:
      - name: postgres
        image: postgres:13
        env:
        - name: POSTGRES_DB
          value: airflow
        - name: POSTGRES_USER
          value: airflow
        - name: POSTGRES_PASSWORD
          value: airflow
        ports:
        - containerPort: 5432

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-scheduler
  namespace: airflow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow-scheduler
  template:
    metadata:
      labels:
        app: airflow-scheduler
    spec:
      nodeSelector:
        kubernetes.io/hostname: workers-vm-1
      tolerations:
      - key: "worker"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      serviceAccountName: airflow
      containers:
      - name: scheduler
        image: rboubaya/airflow:1.0
        command: ["/entrypoint.sh"]
        args: ["airflow", "scheduler"]
        env:
        - name: AIRFLOW__CORE__EXECUTOR
          value: KubernetesExecutor
        volumeMounts:
        - name: airflow-config
          mountPath: /opt/airflow/airflow.cfg
          subPath: airflow.cfg
        - name: airflow-dags
          mountPath: /opt/airflow/dags
        - name: pod-template
          mountPath: /opt/airflow/pod_template.yaml
          subPath: pod_template.yaml
      volumes:
      - name: airflow-config
        configMap:
          name: airflow-config
      - name: airflow-dags
        persistentVolumeClaim:
          claimName: airflow-dags-pvc
      - name: pod-template
        configMap:
          name: airflow-config

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-web
  namespace: airflow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: airflow-web
  template:
    metadata:
      labels:
        app: airflow-web
    spec:
      nodeSelector:
        kubernetes.io/hostname: workers-vm-1
      tolerations:
      - key: "key"
        operator: "Equal"
        value: "value"
        effect: "worker"
      serviceAccountName: airflow
      containers:
      - name: web
        image: rboubaya/airflow:1.0
        command: ["/entrypoint.sh"]
        args: ["airflow", "webserver"]
        env:
        - name: AIRFLOW__CORE__EXECUTOR
          value: KubernetesExecutor
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: airflow-config
          mountPath: /opt/airflow/airflow.cfg
          subPath: airflow.cfg
        - name: airflow-dags
          mountPath: /opt/airflow/dags
        - name: pod-template
          mountPath: /opt/airflow/pod_template.yaml
          subPath: pod_template.yaml
      volumes:
      - name: airflow-config
        configMap:
          name: airflow-config
      - name: airflow-dags
        persistentVolumeClaim:
          claimName: airflow-dags-pvc
      - name: pod-template
        configMap:
          name: airflow-config

---
apiVersion: v1
kind: Service
metadata:
  name: airflow-web
  namespace: airflow
spec:
  type: NodePort
  ports:
  - port: 8080
    nodePort: 30080
  selector:
    app: airflow-web

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: airflow
spec:
  ports:
  - port: 5432
  selector:
    app: postgres

---
apiVersion: v1
kind: Service
metadata:
  name: statsd
  namespace: airflow
spec:
  ports:
  - port: 8125
    protocol: UDP
  selector:
    app: statsd

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: statsd
  namespace: airflow
spec:
  replicas: 1
  selector:
    matchLabels:
      app: statsd
  template:
    metadata:
      labels:
        app: statsd
    spec:
      nodeSelector:
        kubernetes.io/hostname: workers-vm-1
      tolerations:
      - key: "worker"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      containers:
      - name: statsd
        image: prom/statsd-exporter:v0.20.0
        ports:
        - containerPort: 8125
          protocol: UDP

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: airflow-api-role
  namespace: airflow
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log", "services", "endpoints", "persistentvolumeclaims"]
  verbs: ["get", "list", "watch", "create", "delete"]
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: ["get", "list", "watch", "create", "delete"]
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "create", "update", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch", "create", "delete", "update"]
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["get", "list", "watch", "create", "update", "delete"]
- apiGroups: ["airflow.apache.org"]
  resources: ["dags", "dags/trigger"]
  verbs: ["get", "list", "watch", "create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: airflow-api-rolebinding
  namespace: airflow
subjects:
- kind: ServiceAccount
  name: airflow
  namespace: airflow
roleRef:
  kind: Role
  name: airflow-api-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: batch/v1
kind: Job
metadata:
  name: create-buckets
  namespace: airflow
spec:
  template:
    spec:
      serviceAccountName: airflow
      containers:
      - name: airflow-trigger
        image: rboubaya/airflow:1.0
        command: ["/entrypoint.sh"]
        args: ["airflow", "dags", "trigger", "minio_storage_pipeline"]  # Utilisez le nom du DAG ici
        env:
        - name: AIRFLOW__CORE__EXECUTOR
          value: KubernetesExecutor
        volumeMounts:
        - name: airflow-config
          mountPath: /opt/airflow/airflow.cfg
          subPath: airflow.cfg
        - name: airflow-dags
          mountPath: /opt/airflow/dags
        - name: pod-template
          mountPath: /opt/airflow/pod_template.yaml
          subPath: pod_template.yaml
      restartPolicy: OnFailure
      volumes:
      - name: airflow-config
        configMap:
          name: airflow-config
      - name: airflow-dags
        persistentVolumeClaim:
          claimName: airflow-dags-pvc
      - name: pod-template
        configMap:
          name: airflow-config

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: trigger-dag-once
  namespace: airflow
spec:
  schedule: "*/5 * * * *"  # Toutes les 5 minutes
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: airflow
          containers:
          - name: airflow-trigger
            image: rboubaya/airflow:1.0
            command: ["/entrypoint.sh"]
            args: ["airflow", "dags", "test", "sftp_to_minio_automate_with_tracking2"]
            env:
            - name: AIRFLOW__CORE__EXECUTOR
              value: KubernetesExecutor
            volumeMounts:
            - name: airflow-config
              mountPath: /opt/airflow/airflow.cfg
              subPath: airflow.cfg
            - name: airflow-dags
              mountPath: /opt/airflow/dags
            - name: pod-template
              mountPath: /opt/airflow/pod_template.yaml
              subPath: pod_template.yaml
          restartPolicy: OnFailure
          volumes:
          - name: airflow-config
            configMap:
              name: airflow-config
          - name: airflow-dags
            persistentVolumeClaim:
              claimName: airflow-dags-pvc
          - name: pod-template
            configMap:
              name: airflow-config